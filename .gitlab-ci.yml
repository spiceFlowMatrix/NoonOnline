image: openjdk:8-jdk

variables:
  DEV_ENV_URL: https://${CI_COMMIT_REF_SLUG}.dev-apps.noon-online.com
  DARI_ENV_URL: https://dari-apps.noon-online.com
  PASHTO_ENV_URL: https://pashto-apps.noon-online.com

stages:
  - environment_setup
  - build
  - test
  - internal
  - alpha
  - beta
  - production

.updateContainerJob:
  image: docker:stable
  stage: environment_setup
  services:
    - docker:dind
  before_script:
    - cd AndroidApp
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG-android || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG-android -t $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG-android .

updateContainer:
  extends: .updateContainerJob
  only:
    changes:
      - Dockerfile

# NOTE: Because the first pipeline on a branch can fail, the only: changes: Dockerfile syntax won't trigger for a subsequent pipeline after you fix things. This can leave your branch without a Docker image to use. So the ensureContainer job will look for an existing image and only build one if it doesn't exist. The one downside to this is that both of these jobs will run at the same time if it is a new branch.
ensureContainer:
  extends: .updateContainerJob
  allow_failure: true
  before_script:
    - cd AndroidApp
    - "mkdir -p ~/.docker && echo '{\"experimental\": \"enabled\"}' > ~/.docker/config.json"
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    # Skip update container `script` if the container already exists
    # via https://gitlab.com/gitlab-org/gitlab-ce/issues/26866#note_97609397 -> https://stackoverflow.com/a/52077071/79683
    - docker manifest inspect $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG-android > /dev/null && exit || true

.build_job:
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG-android
  stage: build
  before_script:
    - rm app/google-services.json
    - echo ${ANDROID_GOOGLE_SERVICES_JSON} | base64 -d > app/google-services.json
    - echo ${ANDROID_SSL_CRT_HASH} | xxd -r -p - > app/src/main/res/raw/noonssl.crt
    # TODO: Ensure none of the configs being updated into the file by sed don't have any @ characters in them since that's what we use as delimiter. See here https://stackoverflow.com/a/584926
    - sed -i 's@---com_auth0_client_id_value---@'"$ANDROID_AUTH0_CLIENT_ID"'@' configs_strings_template.xml
    - sed -i 's@---com_auth0_domain_value---@'"$ANDROID_AUTH0_DOMAIN"'@' configs_strings_template.xml
    - sed -i 's@---com_auth0_audience_value---@'"$ANDROID_AUTH0_AUDIENCE"'@' configs_strings_template.xml
    - sed -i 's@---YOUR_API_KEY_value---@'"$ANDROID_ENC_LIB_API_KEY"'@' configs_strings_template.xml
    - cp configs_strings_template.xml devenv_strings_template.xml
    - sed -i 's@---BASE_URL_value---@'"$DEV_ENV_URL"'@' devenv_strings_template.xml
    - cp configs_strings_template.xml dariprod_strings_template.xml
    - sed -i 's@---BASE_URL_value---@'"$DARI_ENV_URL"'@' dariprod_strings_template.xml
    - cp configs_strings_template.xml pashtoprod_strings_template.xml
    - sed -i 's@---BASE_URL_value---@'"$PASHTO_ENV_URL"'@' pashtoprod_strings_template.xml
    # We store this binary file in a variable as hex with this command, `xxd -p gitter-android-app.jks`
    # Then we convert the hex back to a binary file
    - echo "$signing_jks_file_hex" | xxd -r -p - > android-signing-keystore.jks
    # We add 100 to get this high enough above current versionCodes that are published
    - "export VERSION_CODE=$((100 + $CI_PIPELINE_IID)) && echo $VERSION_CODE"
    - "export VERSION_SHA=`echo ${CI_COMMIT_SHORT_SHA}` && echo $VERSION_SHA"
    # TODO: Add in automated merge request creation for creating the changelog for the latest version in fastlane metadata. See Build and Test section here to learn more https://about.gitlab.com/blog/2019/01/28/android-publishing-with-gitlab-and-fastlane/
  after_script:
    - rm -f android-signing-keystore.jks || true
  artifacts:
    paths:
      - AndroidApp/app/build/outputs

buildDebug:
  extends: .build_job
  script:
    # Copy in the config strings
    - rm app/src/debug/res/values/strings.xml
    - cp devenv_strings_template.xml app/src/debug/res/values/strings.xml
    # Copy in the resources strings
    - rm app/src/main/res/values/strings.xml
    - cp dari_values_strings.xml app/src/main/res/values/strings.xml
    - bundle exec fastlane buildDebug
  environment:
    name: development/$CI_COMMIT_REF_SLUG
    url: $DEV_ENV_URL

testDebug:
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG-android
  stage: test
  dependencies:
    - buildDebug
  script:
    - build exec fastlane test

buildRelease:
  extends: .build_job
  script:
    # Copy in the config strings
    - rm app/src/release/res/values/strings.xml
    - cp dariprod_strings_template.xml app/src/release/res/values/strings.xml
    # Copy in the resources strings
    - rm app/src/main/res/values/strings.xml
    - cp dari_values_strings.xml app/src/main/res/values/strings.xml
    - bundle exec fastlane buildRelease
  environment:
    name: dari_production
    url: $DARI_ENV_URL
  only:
    - master

buildRelease:
  extends: .build_job
  script:
    # Copy in the config strings
    - rm app/src/release/res/values/strings.xml
    - cp pashtoprod_strings_template.xml app/src/release/res/values/strings.xml
    # Copy in the resources strings
    - rm app/src/main/res/values/strings.xml
    - cp pashto_values_strings.xml app/src/main/res/values/strings.xml
    - sed -i 's/com.app.training24.noon/com.app.training24.noonpashto/' fastlane/Appfile
    - sed -i 's/applicationId "com.app.training24.noon"/applicationId "com.app.training24.noonpashto"/' app/build.gradle
    - bundle exec fastlane buildRelease
  environment:
    name: pashto_production
    url: $PASHTO_ENV_URL
  only:
    - master

publishInternal:
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG-android
  stage: internal
  only:
    - master
  environment:
    name: dari_production
    url: $DARI_ENV_URL
  dependencies:
    - buildRelease
  when: manual
  before_script:
    - echo $google_play_service_account_api_key_json > ~/google_play_api_key.json
  after_script:
    - rm ~/google_play_api_key.json
  script:
    - bundle exec fastlane internal

publishInternal:
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG-android
  stage: internal
  only:
    - master
  environment:
    name: pashto_production
    url: $PASHTO_ENV_URL
  dependencies:
    - buildRelease
  when: manual
  before_script:
    - echo $google_play_service_account_api_key_json > ~/google_play_api_key.json
  after_script:
    - rm ~/google_play_api_key.json
  script:
    - bundle exec fastlane internal

.promote_job:
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG-android
  when: manual
  dependencies: []
  only:
    - master
  before_script:
    - echo $google_play_service_account_api_key_json > ~/google_play_api_key.json
  after_script:
    - rm ~/google_play_api_key.json

# Dari promotions
promoteAlpha:
  extends: .promote_job
  stage: alpha
  script:
    - bundle exec fastlane promote_internal_to_alpha
  environment:
    name: dari_production
    url: $DARI_ENV_URL

promoteBeta:
  extends: .promote_job
  stage: beta
  script:
    - bundle exec fastlane promote_alpha_to_beta
  environment:
    name: dari_production
    url: $DARI_ENV_URL

promoteProduction:
  extends: .promote_job
  stage: production
  script:
    - bundle exec fastlane promote_beta_to_production
  environment:
    name: dari_production
    url: $DARI_ENV_URL

# Pashto promotions
promoteAlpha:
  extends: .promote_job
  stage: alpha
  script:
    - bundle exec fastlane promote_internal_to_alpha
  environment:
    name: pashto_production
    url: $PASHTO_ENV_URL

promoteBeta:
  extends: .promote_job
  stage: beta
  script:
    - bundle exec fastlane promote_alpha_to_beta
  environment:
    name: pashto_production
    url: $PASHTO_ENV_URL

promoteProduction:
  extends: .promote_job
  stage: production
  script:
    - bundle exec fastlane promote_beta_to_production
  environment:
    name: pashto_production
    url: $PASHTO_ENV_URL