image: openjdk:8-jdk

variables:
  ANDROID_COMPILE_SDK: '29'
  ANDROID_BUILD_TOOLS: '29.0.2'
  ANDROID_SDK_TOOLS: '4333796'
  DEV_ENV_URL: ${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_SLUG}.dev-apps.noon-online.com
  DARI_REVIEW_ENV_URL: dari-staging-apps.noon-online.com
  PASHTO_REVIEW_ENV_URL: pashto-staging-apps.noon-online.com
  DARI_PROD_ENV_URL: dari-production-apps.noon-online.com
  PASHTO_PROD_ENV_URL: pashto-production-apps.noon-online.com
  NOON_WEB_IMAGE_DARI: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}-webdari-${CI_COMMIT_SHORT_SHA}
  NOON_WEB_IMAGE_PASHTO: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}-webpashto-${CI_COMMIT_SHORT_SHA}
  NOON_ANDROID_IMAGE_DARI: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}-androiddari-${CI_COMMIT_SHORT_SHA}
  NOON_ANDROID_IMAGE_PASHTO: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}-androidpashto-${CI_COMMIT_SHORT_SHA}

stages:
  - buildWebApps
  - buildPackageBackendHost
  - containerizeWeb
  - deployWeb
  - buildAndroid

# Build and artifact the admin web app. Cache packages downloaded in node modules to be reused for future runs of the same job on the same branch
buildAdminApp:
  image: node:latest
  stage: buildWebApps
  environment:
    name: review
  cache:
    key: '$CI_JOB_NAME-$CI_COMMIT_REF_NAME'
    paths:
      - Training24Admin/Admin-noon/node_modules/
  before_script:
    - apt-get update && apt-get install -y unzip fontconfig locales gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget
    - cd Training24Admin/Admin-noon/
    - npm install --quiet
    - rm -f src/environments/environment.ts
    - rm -f src/environments/environment.prod.ts
  script:
    # Begin script for dari version
    ## We encrypt the environment.ts file in base64 by applying `base64 -w 0 FILENAME.ts` command on it and then supply it as environmet variable
    - echo ${DARI_ADMIN_APP_CONFIG_VALUES} | base64 -d > src/environments/environment.ts
    - echo ${DARI_ADMIN_APP_CONFIG_VALUES} | base64 -d > src/environments/environment.prod.ts
    - npm run build --prod
    - cp -r dist/ distDari
    - rm -r dist/
    - rm src/environments/environment.ts
    - rm src/environments/environment.prod.ts
    # Begin script for Pashto version
    - echo ${PASHTO_ADMIN_APP_CONFIG_VALUES} | base64 -d > src/environments/environment.ts
    - echo ${PASHTO_ADMIN_APP_CONFIG_VALUES} | base64 -d > src/environments/environment.prod.ts
    - npm run build --prod
    - cp -r dist/ distPashto
  after_script:
    - rm -rf dist/
    - rm -rf src/environments/environment.ts
    - rm -rf src/environments/environment.prod.ts
  artifacts:
    paths:
      - Training24Admin/Admin-noon/distDari/
      - Training24Admin/Admin-noon/distPashto/
    expire_in: 1 week

# Build and artifact the sales web app. Cache packages downloaded in node modules to be reused for future runs of the same job on the same branch
buildSalesApp:
  image: node:latest
  stage: buildWebApps
  environment:
    name: review
  cache:
    key: '$CI_JOB_NAME-$CI_COMMIT_REF_NAME'
    paths:
      - Training24Admin/Sales-noon/node_modules/
  before_script:
    - apt-get update && apt-get install -y unzip fontconfig locales gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget
    - cd Training24Admin/Sales-noon/
    - npm install --quiet
    - rm -f src/environments/environment.ts
    - rm -f src/environments/environment.prod.ts
  script:
    # Begin script for dari version
    ## We encrypt the environment.ts file in base64 by applying `base64 -w 0 FILENAME.ts` command on it and then supply it as environmet variable
    - echo ${DARI_SALES_APP_CONFIG_VALUES} | base64 -d > src/environments/environment.ts
    - echo ${DARI_SALES_APP_CONFIG_VALUES} | base64 -d > src/environments/environment.prod.ts
    - npm run build --prod
    - cp -r dist/ distDari
    - rm -r dist/
    - rm src/environments/environment.ts
    - rm src/environments/environment.prod.ts
    # Begin script for Pashto version
    - echo ${PASHTO_SALES_APP_CONFIG_VALUES} | base64 -d > src/environments/environment.ts
    - echo ${PASHTO_SALES_APP_CONFIG_VALUES} | base64 -d > src/environments/environment.prod.ts
    - npm run build --prod
    - cp -r dist/ distPashto
  after_script:
    - rm -rf dist/
    - rm -rf src/environments/environment.prod.ts
  artifacts:
    paths:
      - Training24Admin/Sales-noon/distDari/
      - Training24Admin/Sales-noon/distPashto/
    expire_in: 1 week

# Build and artifact the feedback web app. Cache packages downloaded in node modules to be reused for future runs of the same job on the same branch
buildFeedbackApp:
  image: node:latest
  stage: buildWebApps
  environment:
    name: review
  cache:
    key: '$CI_JOB_NAME-$CI_COMMIT_REF_NAME'
    paths:
      - Training24Admin/Feedback-noon/node_modules/
  before_script:
    - apt-get update && apt-get install -y unzip fontconfig locales gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget
    - cd Training24Admin/Feedback-noon/
    - npm install --quiet
    - rm -f src/environments/environment.ts
    - rm -f src/environments/environment.prod.ts
  script:
    # Begin script for dari version
    ## We encrypt the environment.ts file in base64 by applying `base64 -w 0 FILENAME.ts` command on it and then supply it as environmet variable
    - echo ${DARI_FEEDBACK_APP_CONFIG_VALUES} | base64 -d > src/environments/environment.ts
    - echo ${DARI_FEEDBACK_APP_CONFIG_VALUES} | base64 -d > src/environments/environment.prod.ts
    - npm run build --prod
    - cp -r dist/ distDari
    - rm -r dist/
    - rm src/environments/environment.ts
    - rm src/environments/environment.prod.ts
    # Begin script for Pashto version
    - echo ${PASHTO_FEEDBACK_APP_CONFIG_VALUES} | base64 -d > src/environments/environment.ts
    - echo ${PASHTO_FEEDBACK_APP_CONFIG_VALUES} | base64 -d > src/environments/environment.prod.ts
    - npm run build --prod
    - cp -r dist/ distPashto
  after_script:
    - rm -rf dist/
    - rm -rf src/environments/environment.ts
    - rm -rf src/environments/environment.prod.ts
  artifacts:
    paths:
      - Training24Admin/Feedback-noon/distDari/
      - Training24Admin/Feedback-noon/distPashto/
    expire_in: 1 week

# Build ASPNETCORE API, package web app artifacts from previous jobs in webhost directory, generate artifact holding all files of API and web apps. Cache downloaded nuget packages to be reused for future runs of the same job on the same branch
buildBackend:
  image: mcr.microsoft.com/dotnet/core/sdk:2.1
  stage: buildPackageBackendHost
  environment:
    name: review
  dependencies:
    - buildAdminApp
    - buildSalesApp
    - buildFeedbackApp
  variables:
    OBJECTS_DIRECTORY: obj/
    BINARIES_DIRECTORY: bin/
    DARI_RELEASE_OBJECTS_DIRECTORY: releaseDari/
    PASHTO_RELEASE_OBJECTS_DIRECTORY: releasePashto/
    NUGET_PACKAGES_DIRECTORY: .nuget/
    SOURCE_CODE_PATH: Training24Admin/
  cache:
    key: '$CI_JOB_NAME-$CI_COMMIT_REF_NAME'
    paths:
      - ${SOURCE_CODE_PATH}${OBJECTS_DIRECTORY}project.assets.json
      - ${SOURCE_CODE_PATH}${OBJECTS_DIRECTORY}*.csproj.nuget.*
      - ${NUGET_PACKAGES_DIRECTORY}
  before_script:
    - dotnet restore --packages ${NUGET_PACKAGES_DIRECTORY}
  script:
    - dotnet publish -c Release -o ${DARI_RELEASE_OBJECTS_DIRECTORY} --no-restore
    - dotnet publish -c Release -o ${PASHTO_RELEASE_OBJECTS_DIRECTORY} --no-restore
    - cp -r ${SOURCE_CODE_PATH}Admin-noon/distDari/ ${SOURCE_CODE_PATH}${DARI_RELEASE_OBJECTS_DIRECTORY}Admin-noon
    - cp -r ${SOURCE_CODE_PATH}Sales-noon/distDari/ ${SOURCE_CODE_PATH}${DARI_RELEASE_OBJECTS_DIRECTORY}Sales-noon
    - cp -r ${SOURCE_CODE_PATH}Feedback-noon/distDari/ ${SOURCE_CODE_PATH}${DARI_RELEASE_OBJECTS_DIRECTORY}Feedback-noon
    - cp -r ${SOURCE_CODE_PATH}Admin-noon/distPashto/ ${SOURCE_CODE_PATH}${PASHTO_RELEASE_OBJECTS_DIRECTORY}Admin-noon
    - cp -r ${SOURCE_CODE_PATH}Sales-noon/distPashto/ ${SOURCE_CODE_PATH}${PASHTO_RELEASE_OBJECTS_DIRECTORY}Sales-noon
    - cp -r ${SOURCE_CODE_PATH}Feedback-noon/distPashto/ ${SOURCE_CODE_PATH}${PASHTO_RELEASE_OBJECTS_DIRECTORY}Feedback-noon
  artifacts:
    paths:
      - ${SOURCE_CODE_PATH}${DARI_RELEASE_OBJECTS_DIRECTORY}
      - ${SOURCE_CODE_PATH}${PASHTO_RELEASE_OBJECTS_DIRECTORY}
    expire_in: 1 week

publishWebHostableContainer:
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: ['']
  environment:
    name: review
  stage: containerizeWeb
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/dariversion.Dockerfile --destination $NOON_WEB_IMAGE_DARI
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/pashtoversion.Dockerfile --destination $NOON_WEB_IMAGE_PASHTO
  only:
    refs:
      - master

deployDariReview:
  image: devth/helm
  stage: deployWeb
  environment:
    name: review
    url: https://${DARI_REVIEW_ENV_URL}
  before_script:
    - mkdir -p /etc/deploy
    - echo ${GKE_SERVICE_ACCOUNT} | base64 -d > /etc/deploy/sa.json
    - gcloud auth activate-service-account --key-file=/etc/deploy/sa.json --project=${GKE_PROJECT}
    - gcloud container clusters get-credentials ${GKE_CLUSTER_NAME} --zone=${GKE_ZONE} --project=${GKE_PROJECT}
    - echo ${DARI_WEB_DEPLOYMENT_CONFIG_VALUES} > chart/values.yaml
  script: helm upgrade --install --namespace ${KUBE_NAMESPACE} --set image=${NOON_WEB_IMAGE_DARI} --set webHostingUrl=${DARI_REVIEW_ENV_URL} --set deploymentNamespace=${KUBE_NAMESPACE} --set netCoreEnvironment=Production --set gitlabProjectPath=${CI_PROJECT_PATH_SLUG} --set gitlabProjectEnvironment=${CI_ENVIRONMENT_SLUG}
  only:
    refs:
      - master

deployPashtoReview:
  image: devth/helm
  stage: deployWeb
  environment:
    name: review
    url: https://${PASHTO_REVIEW_ENV_URL}
  before_script:
    - mkdir -p /etc/deploy
    - echo ${GKE_SERVICE_ACCOUNT} | base64 -d > /etc/deploy/sa.json
    - gcloud auth activate-service-account --key-file=/etc/deploy/sa.json --project=${GKE_PROJECT}
    - gcloud container clusters get-credentials ${GKE_CLUSTER_NAME} --zone=${GKE_ZONE} --project=${GKE_PROJECT}
    - echo ${PASHTO_WEB_DEPLOYMENT_CONFIG_VALUES} > chart/values.yaml
  script: helm upgrade --install --namespace ${KUBE_NAMESPACE} --set image=${NOON_WEB_IMAGE_PASHTO} --set webHostingUrl=${PASHTO_REVIEW_ENV_URL} --set deploymentNamespace=${KUBE_NAMESPACE} --set netCoreEnvironment=Production --set gitlabProjectPath=${CI_PROJECT_PATH_SLUG} --set gitlabProjectEnvironment=${CI_ENVIRONMENT_SLUG}
  only:
    refs:
      - master

.buildAndroidJob:
  before_script:
    - cd AndroidApp/
    - touch local.properties
    - rm -f app/src/main/res/raw/noonssl.crt
    # Install and set up Android SDK
    - apt-get --quiet update --yes
    - apt-get --quiet install --yes wget tar unzip lib32stdc++6 lib32z1
    - wget --quiet --output-document=android-sdk.zip https://dl.google.com/android/repository/sdk-tools-linux-${ANDROID_SDK_TOOLS}.zip
    - unzip -d android-sdk-linux android-sdk.zip
    - echo y | android-sdk-linux/tools/bin/sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}" >/dev/null
    - echo y | android-sdk-linux/tools/bin/sdkmanager "platform-tools" >/dev/null
    - echo y | android-sdk-linux/tools/bin/sdkmanager "build-tools;${ANDROID_BUILD_TOOLS}" >/dev/null
    - export ANDROID_HOME=$PWD/android-sdk-linux
    - export PATH=$PATH:$PWD/android-sdk-linux/platform-tools/
    - chmod +x ./gradlew
    # temporarily disable checking for EPIPE error and use yes to accept all licenses
    - set +o pipefail
    - yes | android-sdk-linux/tools/bin/sdkmanager --licenses
    - set -o pipefail
    - 'export VERSION_CODE=$((100 + $CI_PIPELINE_IID)) && echo $VERSION_CODE'
    - 'export VERSION_SHA=`echo ${CI_COMMIT_SHORT_SHA}` && echo $VERSION_SHA'

lintDebug:
  extends: .buildAndroidJob
  stage: buildAndroid
  environment:
    name: review
  script:
    - ./gradlew -Pci --console=plain :app:lintDebug -PbuildDir=lint
  artifacts:
    expire_in: 1 week
    when: on_failure
    paths:
      - AndroidApp/app/lint/
      - AndroidApp/android-file-chooser/lint/
      - AndroidApp/giraffeplayer2/lint/
      - AndroidApp/prdownloader/lint/

assembleDebug:
  extends: .buildAndroidJob
  stage: buildAndroid
  environment:
    name: review
  script:
    # We encode the noonssl.crt file in base64 by applying `base64 -w 0 FILENAME.ts` command on it and then supply it as ANDROID_SSL_CRT_BASE64 environmet variable
    - echo ${ANDROID_SSL_CRT_BASE64} | base64 -d > app/src/main/res/raw/noonssl.crt
    ## Begin script for dari version
    # We encode the google-services.json file in base64 by applying `base64 -w 0 FILENAME.ts` command on it and then supply it as ANDROID_GOOGLE_SERVICES_JSON environmet variable
    - rm -f app/google-services.json
    - echo ${DARI_ANDROID_GOOGLE_SERVICES_JSON} | base64 -d > app/google-services.json
    # We encode the configs_strings_template.xml file in base64 by applying `base64 -w 0 FILENAME.ts` command on it and then supply it as DARI_ANDROID_APP_CONFIG_VALUES environmet variable
    - rm configs_strings_template.xml
    - echo ${DARI_ANDROID_APP_CONFIG_VALUES} | base64 -d > configs_strings_template.xml
    - sed -i 's@---BASE_URL_value_from_ci---@'"$DARI_REVIEW_ENV_URL"'@' configs_strings_template.xml
    # Copy in the config strings
    - rm app/src/debug/res/values/strings.xml
    - cp configs_strings_template.xml app/src/debug/res/values/strings.xml
    # Copy in the resources strings
    - rm app/src/main/res/values/strings.xml
    - cp dari_values_strings.xml app/src/main/res/values/strings.xml
    - ./gradlew assembleDebug
    - cp -r app/build/outputs/ dariBuildOutputs
    - rm -rf app/build/outputs/
    ## Begin script for pashto version
    # We encode the google-services.json file in base64 by applying `base64 -w 0 FILENAME.ts` command on it and then supply it as ANDROID_GOOGLE_SERVICES_JSON environmet variable
    - rm -f app/google-services.json
    - echo ${PASHTO_ANDROID_GOOGLE_SERVICES_JSON} | base64 -d > app/google-services.json
    # We encode the configs_strings_template.xml file in base64 by applying `base64 -w 0 FILENAME.ts` command on it and then supply it as PASHTO_ANDROID_APP_CONFIG_VALUES environmet variable
    - rm configs_strings_template.xml
    - echo ${PASHTO_ANDROID_APP_CONFIG_VALUES} | base64 -d > configs_strings_template.xml
    - sed -i 's@---BASE_URL_value_from_ci---@'"$PASHTO_REVIEW_ENV_URL"'@' configs_strings_template.xml
    # We need to make sure the correct applicationId is used in build.gradle when building the pashto version of the application
    - sed -i 's@applicationId "com.app.training24.noon"@applicationId "com.app.training24.noonpashto"@' app/build.gradle
    # Copy in the config strings
    - rm app/src/debug/res/values/strings.xml
    - cp configs_strings_template.xml app/src/debug/res/values/strings.xml
    # Copy in the resources strings
    - rm app/src/main/res/values/strings.xml
    - cp pashto_values_strings.xml app/src/main/res/values/strings.xml
    - ./gradlew assembleDebug
    - cp -r app/build/outputs/ pashtoBuildOutputs
    - rm -rf app/build/outputs/
  after_script:
    - rm -f app/src/main/res/raw/noonssl.crt
  artifacts:
    paths:
      - AndroidApp/dariBuildOutputs/
      - AndroidApp/pashtoBuildOutputs/
