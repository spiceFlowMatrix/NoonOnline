variables:
  ANDROID_COMPILE_SDK: '29'
  ANDROID_BUILD_TOOLS: '29.0.2'
  ANDROID_SDK_TOOLS: '4333796'
  DARI_REVIEW_ENV_URL: dari-staging-apps.noon-online.com
  PASHTO_REVIEW_ENV_URL: pashto-staging-apps.noon-online.com
  DARI_PROD_ENV_URL: dari-production-apps.noon-online.com
  PASHTO_PROD_ENV_URL: pashto-production-apps.noon-online.com
  NOON_WEB_IMAGE_DARI: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}-webdari-${CI_COMMIT_SHORT_SHA}
  NOON_WEB_IMAGE_PASHTO: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}-webpashto-${CI_COMMIT_SHORT_SHA}
  NOON_WEB_IMAGE_DARI_PROD: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}-webdariprod-${CI_COMMIT_SHORT_SHA}
  NOON_WEB_IMAGE_PASHTO_PROD: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}-webpashtoprod-${CI_COMMIT_SHORT_SHA}

stages:
  - lint
  - buildDariApps
  - buildPashtoApps
  - buildPackageBackendHost
  - containerizeWeb
  - deployWeb
  - awaitProduction
  - buildDariAppsProduction
  - buildPashtoAppsProduction
  - buildPackageBackendHostProduction
  - containerizeWebProduction
  - deployWebProduction

.buildAndroidJob:
  before_script:
    - cd AndroidApp/
    - touch local.properties
    # Install and set up Android SDK
    - apt-get --quiet update --yes
    - apt-get --quiet install --yes wget tar unzip lib32stdc++6 lib32z1 vim-common
    - wget --quiet --output-document=android-sdk.zip https://dl.google.com/android/repository/sdk-tools-linux-${ANDROID_SDK_TOOLS}.zip
    - unzip -d android-sdk-linux android-sdk.zip
    - echo y | android-sdk-linux/tools/bin/sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}" >/dev/null
    - echo y | android-sdk-linux/tools/bin/sdkmanager "platform-tools" >/dev/null
    - echo y | android-sdk-linux/tools/bin/sdkmanager "build-tools;${ANDROID_BUILD_TOOLS}" >/dev/null
    - export ANDROID_HOME=$PWD/android-sdk-linux
    - export PATH=$PATH:$PWD/android-sdk-linux/platform-tools/
    - chmod +x ./gradlew
    # temporarily disable checking for EPIPE error and use yes to accept all licenses
    - set +o pipefail
    - yes | android-sdk-linux/tools/bin/sdkmanager --licenses
    - set -o pipefail
    - 'export VERSION_CODE=$((100 + $CI_PIPELINE_IID)) && echo $VERSION_CODE'
    - 'export VERSION_SHA=`echo ${CI_COMMIT_SHORT_SHA}` && echo $VERSION_SHA'

lintDebug:
  image: openjdk:8-jdk
  extends: .buildAndroidJob
  stage: lint
  script:
    - ./gradlew -Pci --console=plain :app:lintDebug -PbuildDir=lint
  when: manual
  artifacts:
    expire_in: 1 week
    when: always
    paths:
      - AndroidApp/app/lint/
      - AndroidApp/android-file-chooser/lint/
      - AndroidApp/giraffeplayer2/lint/
      - AndroidApp/prdownloader/lint/

assembleDebugDari:
  image: openjdk:8-jdk
  extends: .buildAndroidJob
  stage: buildDariApps
  environment:
    name: review/dari
  script:
    - rm -f app/src/main/res/raw/noonssl.crt
    # We encode the noonssl.crt file in base64 by applying `base64 -w 0 FILENAME.ts` command on it and then supply it as ANDROID_SSL_CRT_BASE64 environmet variable
    - echo ${ANDROID_SSL_CRT_BASE64} | base64 -d > app/src/main/res/raw/noonssl.crt
    ## Begin script for dari version
    # We encode the google-services.json file in base64 by applying `base64 -w 0 FILENAME.ts` command on it and then supply it as ANDROID_GOOGLE_SERVICES_JSON environmet variable
    - rm -f app/google-services.json
    - echo ${DARI_ANDROID_GOOGLE_SERVICES_JSON} | base64 -d > app/google-services.json
    # We encode the configs_strings_template.xml file in base64 by applying `base64 -w 0 FILENAME.ts` command on it and then supply it as DARI_ANDROID_APP_CONFIG_VALUES environmet variable
    - rm configs_strings_template.xml
    - echo ${DARI_ANDROID_APP_CONFIG_VALUES} | base64 -d > configs_strings_template.xml
    - sed -i 's@---BASE_URL_value_from_ci---@'"$DARI_REVIEW_ENV_URL"'@' configs_strings_template.xml
    # Copy in the config strings
    - rm app/src/debug/res/values/strings.xml
    - cp configs_strings_template.xml app/src/debug/res/values/strings.xml
    # Copy in the resources strings
    - rm app/src/main/res/values/strings.xml
    - cp dari_values_strings.xml app/src/main/res/values/strings.xml
    - cp secrets.properties.example secrets.properties
    - touch app/noon-android-app.jks
    - ./gradlew clean
    - ./gradlew assembleDebug
    - cp -r app/build/outputs/ dariBuildOutputs
  after_script:
    - cd AndroidApp/
    - rm -rf app/build/outputs/
    - rm -f app/src/main/res/raw/noonssl.crt
  artifacts:
    paths:
      - AndroidApp/dariBuildOutputs/

assembleDebugPashto:
  image: openjdk:8-jdk
  extends: .buildAndroidJob
  stage: buildPashtoApps
  environment:
    name: review/pashto
  script:
    - rm -f app/src/main/res/raw/noonssl.crt
    # We encode the noonssl.crt file in base64 by applying `base64 -w 0 FILENAME.ts` command on it and then supply it as ANDROID_SSL_CRT_BASE64 environmet variable
    - echo ${ANDROID_SSL_CRT_BASE64} | base64 -d > app/src/main/res/raw/noonssl.crt
    # We encode the google-services.json file in base64 by applying `base64 -w 0 FILENAME.ts` command on it and then supply it as ANDROID_GOOGLE_SERVICES_JSON environmet variable
    - rm -f app/google-services.json
    - echo ${PASHTO_ANDROID_GOOGLE_SERVICES_JSON} | base64 -d > app/google-services.json
    # We encode the configs_strings_template.xml file in base64 by applying `base64 -w 0 FILENAME.ts` command on it and then supply it as PASHTO_ANDROID_APP_CONFIG_VALUES environmet variable
    - rm configs_strings_template.xml
    - echo ${PASHTO_ANDROID_APP_CONFIG_VALUES} | base64 -d > configs_strings_template.xml
    - sed -i 's@---BASE_URL_value_from_ci---@'"$PASHTO_REVIEW_ENV_URL"'@' configs_strings_template.xml
    # We need to make sure the correct applicationId is used in build.gradle when building the pashto version of the application
    - sed -i 's@applicationId "com.app.training24.noon"@applicationId "com.app.training24.noonpashto"@' app/build.gradle
    # Copy in the config strings
    - rm app/src/debug/res/values/strings.xml
    - cp configs_strings_template.xml app/src/debug/res/values/strings.xml
    # Copy in the resources strings
    - rm app/src/main/res/values/strings.xml
    - cp pashto_values_strings.xml app/src/main/res/values/strings.xml
    - cp secrets.properties.example secrets.properties
    - touch app/noon-android-app.jks
    - ./gradlew clean
    - ./gradlew assembleDebug
    - cp -r app/build/outputs/ pashtoBuildOutputs
  after_script:
    - cd AndroidApp/
    - rm -rf app/build/outputs/
    - rm -f app/src/main/res/raw/noonssl.crt
  artifacts:
    paths:
      - AndroidApp/pashtoBuildOutputs/


# Build and artifact the admin web app. Cache packages downloaded in node modules to be reused for future runs of the same job on the same branch
buildAdminAppDari:
  image: node:latest
  stage: buildDariApps
  environment:
    name: review/dari
  cache:
    key: '$CI_JOB_NAME-$CI_COMMIT_REF_NAME'
    paths:
      - Training24Admin/Admin-noon/node_modules/
  before_script:
    - apt-get update && apt-get install -y unzip fontconfig locales gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget
    - cd Training24Admin/Admin-noon/
    - npm cache clean -f
    - npm install -g n
    - n stable
    - node -v
    - npm -v
    - rm -rf package-lock.json node_modules
    - npm cache clean --force
    - npm i --unsafe-perm node-sass
    - npm install --unsafe-perm -g @angular/cli@6.0.0
    - npm install --quiet
    - npm install rxjs@6.2.2 --save
    - npm install --save @types/lodash@4.14.116 --quiet
    - rm -f src/environments/environment.ts
    - rm -f src/environments/environment.prod.ts
  script:
    # Begin script for dari version
    ## We encrypt the environment.ts file in base64 by applying `base64 -w 0 FILENAME.ts` command on it and then supply it as environmet variable
    - echo ${DARI_ADMIN_APP_CONFIG_VALUES} | base64 -d > src/environments/environment.ts
    - echo ${DARI_ADMIN_APP_CONFIG_VALUES} | base64 -d > src/environments/environment.prod.ts
    - npm run build --prod
    - cp -r dist/ distDari
  after_script:
    - cd Training24Admin/Admin-noon/
    - rm -rf dist/
    - rm -rf src/environments/environment.ts
    - rm -rf src/environments/environment.prod.ts
  artifacts:
    paths:
      - Training24Admin/Admin-noon/distDari/
    expire_in: 1 week

buildAdminAppPashto:
  image: node:latest
  stage: buildPashtoApps
  environment:
    name: review/pashto
  cache:
    key: '$CI_JOB_NAME-$CI_COMMIT_REF_NAME'
    paths:
      - Training24Admin/Admin-noon/node_modules/
  before_script:
    - apt-get update && apt-get install -y unzip fontconfig locales gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget
    - cd Training24Admin/Admin-noon/
    - npm cache clean -f
    - npm install -g n
    - n stable
    - node -v
    - npm -v
    - rm -rf package-lock.json node_modules
    - npm cache clean --force
    - npm i --unsafe-perm node-sass
    - npm install --unsafe-perm -g @angular/cli@6.0.0
    - npm install --quiet
    - npm install rxjs@6.2.2 --save
    - npm install --save @types/lodash@4.14.116 --quiet
    - rm -f src/environments/environment.ts
    - rm -f src/environments/environment.prod.ts
  script:
    # Begin script for dari version
    ## We encrypt the environment.ts file in base64 by applying `base64 -w 0 FILENAME.ts` command on it and then supply it as environmet variable
    - echo ${PASHTO_ADMIN_APP_CONFIG_VALUES} | base64 -d > src/environments/environment.ts
    - echo ${PASHTO_ADMIN_APP_CONFIG_VALUES} | base64 -d > src/environments/environment.prod.ts
    - npm run build --prod
    - cp -r dist/ distPashto
  after_script:
    - cd Training24Admin/Admin-noon/
    - rm -rf dist/
    - rm -rf src/environments/environment.ts
    - rm -rf src/environments/environment.prod.ts
  artifacts:
    paths:
      - Training24Admin/Admin-noon/distPashto/
    expire_in: 1 week

# Build and artifact the sales web app. Cache packages downloaded in node modules to be reused for future runs of the same job on the same branch
buildSalesAppDari:
  image: node:latest
  stage: buildDariApps
  environment:
    name: review/dari
  cache:
    key: '$CI_JOB_NAME-$CI_COMMIT_REF_NAME'
    paths:
      - Training24Admin/Sales-noon/node_modules/
  before_script:
    - apt-get update && apt-get install -y unzip fontconfig locales gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget
    - cd Training24Admin/Sales-noon/
    - npm install --quiet
    - rm -f src/environments/environment.ts
    - rm -f src/environments/environment.prod.ts
  script:
    # Begin script for dari version
    ## We encrypt the environment.ts file in base64 by applying `base64 -w 0 FILENAME.ts` command on it and then supply it as environmet variable
    - echo ${DARI_SALES_APP_CONFIG_VALUES} | base64 -d > src/environments/environment.ts
    - echo ${DARI_SALES_APP_CONFIG_VALUES} | base64 -d > src/environments/environment.prod.ts
    - npm run build --prod
    - cp -r dist/ distDari
  after_script:
    - cd Training24Admin/Sales-noon/
    - rm -rf dist/
    - rm -rf src/environments/environment.ts
    - rm -rf src/environments/environment.prod.ts
  artifacts:
    paths:
      - Training24Admin/Sales-noon/distDari/
    expire_in: 1 week

buildSalesAppPashto:
  image: node:latest
  stage: buildPashtoApps
  environment:
    name: review/pashto
  cache:
    key: '$CI_JOB_NAME-$CI_COMMIT_REF_NAME'
    paths:
      - Training24Admin/Sales-noon/node_modules/
  before_script:
    - apt-get update && apt-get install -y unzip fontconfig locales gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget
    - cd Training24Admin/Sales-noon/
    - npm install --quiet
    - rm -f src/environments/environment.ts
    - rm -f src/environments/environment.prod.ts
  script:
    # Begin script for dari version
    ## We encrypt the environment.ts file in base64 by applying `base64 -w 0 FILENAME.ts` command on it and then supply it as environmet variable
    - echo ${PASHTO_SALES_APP_CONFIG_VALUES} | base64 -d > src/environments/environment.ts
    - echo ${PASHTO_SALES_APP_CONFIG_VALUES} | base64 -d > src/environments/environment.prod.ts
    - npm run build --prod
    - cp -r dist/ distPashto
  after_script:
    - cd Training24Admin/Sales-noon/
    - rm -rf dist/
    - rm -rf src/environments/environment.ts
    - rm -rf src/environments/environment.prod.ts
  artifacts:
    paths:
      - Training24Admin/Sales-noon/distPashto/
    expire_in: 1 week

# Build and artifact the feedback web app. Cache packages downloaded in node modules to be reused for future runs of the same job on the same branch
buildFeedbackAppDari:
  image: node:latest
  stage: buildDariApps
  environment:
    name: review/dari
  cache:
    key: '$CI_JOB_NAME-$CI_COMMIT_REF_NAME'
    paths:
      - Training24Admin/Feedback-noon/node_modules/
  before_script:
    - apt-get update && apt-get install -y unzip fontconfig locales gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget
    - cd Training24Admin/Feedback-noon/
    - npm install --quiet
    - rm -f src/environments/environment.ts
    - rm -f src/environments/environment.prod.ts
  script:
    # Begin script for dari version
    ## We encrypt the environment.ts file in base64 by applying `base64 -w 0 FILENAME.ts` command on it and then supply it as environmet variable
    - echo ${DARI_FEEDBACK_APP_CONFIG_VALUES} | base64 -d > src/environments/environment.ts
    - echo ${DARI_FEEDBACK_APP_CONFIG_VALUES} | base64 -d > src/environments/environment.prod.ts
    - npm run build --prod
    - cp -r dist/ distDari
  after_script:
    - cd Training24Admin/Feedback-noon/
    - rm -rf dist/
    - rm -rf src/environments/environment.ts
    - rm -rf src/environments/environment.prod.ts
  artifacts:
    paths:
      - Training24Admin/Feedback-noon/distDari/
    expire_in: 1 week

buildFeedbackAppPashto:
  image: node:latest
  stage: buildPashtoApps
  environment:
    name: review/pashto
  cache:
    key: '$CI_JOB_NAME-$CI_COMMIT_REF_NAME'
    paths:
      - Training24Admin/Feedback-noon/node_modules/
  before_script:
    - apt-get update && apt-get install -y unzip fontconfig locales gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget
    - cd Training24Admin/Feedback-noon/
    - npm install --quiet
    - rm -f src/environments/environment.ts
    - rm -f src/environments/environment.prod.ts
  script:
    # Begin script for dari version
    ## We encrypt the environment.ts file in base64 by applying `base64 -w 0 FILENAME.ts` command on it and then supply it as environmet variable
    - echo ${PASHTO_FEEDBACK_APP_CONFIG_VALUES} | base64 -d > src/environments/environment.ts
    - echo ${PASHTO_FEEDBACK_APP_CONFIG_VALUES} | base64 -d > src/environments/environment.prod.ts
    - npm run build --prod
    - cp -r dist/ distPashto
  after_script:
    - cd Training24Admin/Feedback-noon/
    - rm -rf dist/
    - rm -rf src/environments/environment.ts
    - rm -rf src/environments/environment.prod.ts
  artifacts:
    paths:
      - Training24Admin/Feedback-noon/distPashto/
    expire_in: 1 week

# Build ASPNETCORE API, package web app artifacts from previous jobs in webhost directory, generate artifact holding all files of API and web apps. Cache downloaded nuget packages to be reused for future runs of the same job on the same branch
buildBackendDari:
  image: mcr.microsoft.com/dotnet/core/sdk:2.1
  stage: buildPackageBackendHost
  environment:
    name: review/dari
  dependencies:
    - assembleDebugDari
    - buildAdminAppDari
    - buildSalesAppDari
    - buildFeedbackAppDari
  variables:
    OBJECTS_DIRECTORY: obj/
    BINARIES_DIRECTORY: bin/
    DARI_RELEASE_OBJECTS_DIRECTORY: releaseDari/
    NUGET_PACKAGES_DIRECTORY: .nuget/
    SOURCE_CODE_PATH: Training24Admin/
  cache:
    key: '$CI_JOB_NAME-$CI_COMMIT_REF_NAME'
    paths:
      - ${SOURCE_CODE_PATH}${OBJECTS_DIRECTORY}project.assets.json
      - ${SOURCE_CODE_PATH}${OBJECTS_DIRECTORY}*.csproj.nuget.*
      - ${NUGET_PACKAGES_DIRECTORY}
  before_script:
    - dotnet restore --packages ${NUGET_PACKAGES_DIRECTORY}
  script:
    - dotnet publish -c Release -o ${DARI_RELEASE_OBJECTS_DIRECTORY} --no-restore
    # TODO: RnD on cleanup of placeholder web app files placed into the release folders by dotnet publish as it's default behavior. It may pose a security risk to keep those files in if they are not needed by the application.
    # Package in dari web apps
    - rm -rf ${SOURCE_CODE_PATH}${DARI_RELEASE_OBJECTS_DIRECTORY}Admin-noon/dist/
    - rm -rf ${SOURCE_CODE_PATH}${DARI_RELEASE_OBJECTS_DIRECTORY}Sales-noon/dist/
    - rm -rf ${SOURCE_CODE_PATH}${DARI_RELEASE_OBJECTS_DIRECTORY}Feedback-noon/dist/
    - cp -a ${SOURCE_CODE_PATH}Admin-noon/distDari/. ${SOURCE_CODE_PATH}${DARI_RELEASE_OBJECTS_DIRECTORY}Admin-noon/dist/
    - cp -a ${SOURCE_CODE_PATH}Sales-noon/distDari/. ${SOURCE_CODE_PATH}${DARI_RELEASE_OBJECTS_DIRECTORY}Sales-noon/dist/
    - cp -a ${SOURCE_CODE_PATH}Feedback-noon/distDari/. ${SOURCE_CODE_PATH}${DARI_RELEASE_OBJECTS_DIRECTORY}Feedback-noon/dist/
  artifacts:
    paths:
      - ${SOURCE_CODE_PATH}${DARI_RELEASE_OBJECTS_DIRECTORY}
    expire_in: 1 week

buildBackendPashto:
  image: mcr.microsoft.com/dotnet/core/sdk:2.1
  stage: buildPackageBackendHost
  environment:
    name: review/pashto
  dependencies:
    - assembleDebugPashto
    - buildAdminAppPashto
    - buildSalesAppPashto
    - buildFeedbackAppPashto
  variables:
    OBJECTS_DIRECTORY: obj/
    BINARIES_DIRECTORY: bin/
    PASHTO_RELEASE_OBJECTS_DIRECTORY: releasePashto/
    NUGET_PACKAGES_DIRECTORY: .nuget/
    SOURCE_CODE_PATH: Training24Admin/
  cache:
    key: '$CI_JOB_NAME-$CI_COMMIT_REF_NAME'
    paths:
      - ${SOURCE_CODE_PATH}${OBJECTS_DIRECTORY}project.assets.json
      - ${SOURCE_CODE_PATH}${OBJECTS_DIRECTORY}*.csproj.nuget.*
      - ${NUGET_PACKAGES_DIRECTORY}
  before_script:
    - dotnet restore --packages ${NUGET_PACKAGES_DIRECTORY}
  script:
    - dotnet publish -c Release -o ${PASHTO_RELEASE_OBJECTS_DIRECTORY} --no-restore
    # TODO: RnD on cleanup of placeholder web app files placed into the release folders by dotnet publish as it's default behavior. It may pose a security risk to keep those files in if they are not needed by the application.
    # Package in pashto web apps
    - rm -rf ${SOURCE_CODE_PATH}${PASHTO_RELEASE_OBJECTS_DIRECTORY}Admin-noon/dist/
    - rm -rf ${SOURCE_CODE_PATH}${PASHTO_RELEASE_OBJECTS_DIRECTORY}Sales-noon/dist/
    - rm -rf ${SOURCE_CODE_PATH}${PASHTO_RELEASE_OBJECTS_DIRECTORY}Feedback-noon/dist/
    - cp -a ${SOURCE_CODE_PATH}Admin-noon/distPashto/. ${SOURCE_CODE_PATH}${PASHTO_RELEASE_OBJECTS_DIRECTORY}Admin-noon/dist/
    - cp -a ${SOURCE_CODE_PATH}Sales-noon/distPashto/. ${SOURCE_CODE_PATH}${PASHTO_RELEASE_OBJECTS_DIRECTORY}Sales-noon/dist/
    - cp -a ${SOURCE_CODE_PATH}Feedback-noon/distPashto/. ${SOURCE_CODE_PATH}${PASHTO_RELEASE_OBJECTS_DIRECTORY}Feedback-noon/dist/
  artifacts:
    paths:
      - ${SOURCE_CODE_PATH}${PASHTO_RELEASE_OBJECTS_DIRECTORY}
    expire_in: 1 week

publishWebHostableContainerDari:
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: ['']
  dependencies:
    - buildBackendDari
  environment:
    name: review/dari
  stage: containerizeWeb
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/dariversion.Dockerfile --destination $NOON_WEB_IMAGE_DARI
  only:
    refs:
      - master

publishWebHostableContainerPashto:
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: ['']
  dependencies:
    - buildBackendPashto
  environment:
    name: review/pashto
  stage: containerizeWeb
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/pashtoversion.Dockerfile --destination $NOON_WEB_IMAGE_PASHTO
  only:
    refs:
      - master

deployDariReview:
  image: devth/helm
  stage: deployWeb
  environment:
    name: review/dari
    url: https://${DARI_REVIEW_ENV_URL}
  before_script:
    - mkdir -p /etc/deploy
    - echo ${GKE_SERVICE_ACCOUNT} | base64 -d > /etc/deploy/sa.json
    - gcloud auth activate-service-account --key-file=/etc/deploy/sa.json --project=${GKE_PROJECT}
    - gcloud container clusters get-credentials ${GKE_CLUSTER_NAME} --zone=${GKE_ZONE} --project=${GKE_PROJECT}
    - echo "${DARI_WEB_DEPLOYMENT_CONFIG_VALUES}" > chart/values.yaml
  script:
    - helm upgrade --install --namespace ${KUBE_NAMESPACE} --set image=${NOON_WEB_IMAGE_DARI} --set webHostingUrl=${DARI_REVIEW_ENV_URL} --set deploymentNamespace=${KUBE_NAMESPACE} --set netCoreEnvironment=Production --set gitlabCiProjectPath=${CI_PROJECT_PATH_SLUG} --set gitlabCiProjectEnvironment=${CI_ENVIRONMENT_SLUG} --set name=noonweb-dari-review --set applicationListenUri=http://*:80 --wait noonweb-dari ./chart
  only:
    refs:
      - master

deployPashtoReview:
  image: devth/helm
  stage: deployWeb
  environment:
    name: review/pashto
    url: https://${PASHTO_REVIEW_ENV_URL}
  before_script:
    - mkdir -p /etc/deploy
    - echo ${GKE_SERVICE_ACCOUNT} | base64 -d > /etc/deploy/sa.json
    - gcloud auth activate-service-account --key-file=/etc/deploy/sa.json --project=${GKE_PROJECT}
    - gcloud container clusters get-credentials ${GKE_CLUSTER_NAME} --zone=${GKE_ZONE} --project=${GKE_PROJECT}
    - echo "${PASHTO_WEB_DEPLOYMENT_CONFIG_VALUES}" > chart/values.yaml
  script: 
    - helm upgrade --install --namespace ${KUBE_NAMESPACE} --set image=${NOON_WEB_IMAGE_PASHTO} --set webHostingUrl=${PASHTO_REVIEW_ENV_URL} --set deploymentNamespace=${KUBE_NAMESPACE} --set netCoreEnvironment=Production --set gitlabCiProjectPath=${CI_PROJECT_PATH_SLUG} --set gitlabCiProjectEnvironment=${CI_ENVIRONMENT_SLUG} --set name=noonweb-pashto-review --set applicationListenUri=http://*:80 --wait noonweb-pashto ./chart
  only:
    refs:
      - master

initiateProduction:
  stage: awaitProduction
  script:
    - echo "Initiating Production Deployment"
  when: manual
  allow_failure: false
  only:
    refs:
      - master

assembleProductionDari:
  image: openjdk:8-jdk
  extends: .buildAndroidJob
  stage: buildDariAppsProduction
  environment:
    name: production/dari
  script:
    - rm -f app/src/main/res/raw/noonssl.crt
    # We encode the noonssl.crt file in base64 by applying `base64 -w 0 FILENAME.ts` command on it and then supply it as ANDROID_SSL_CRT_BASE64 environmet variable
    - echo ${ANDROID_SSL_CRT_BASE64} | base64 -d > app/src/main/res/raw/noonssl.crt
    ## Begin script for dari version
    # We encode the google-services.json file in base64 by applying `base64 -w 0 FILENAME.ts` command on it and then supply it as ANDROID_GOOGLE_SERVICES_JSON environmet variable
    - rm -f app/google-services.json
    - echo ${DARI_ANDROID_GOOGLE_SERVICES_JSON} | base64 -d > app/google-services.json
    # We encode the configs_strings_template.xml file in base64 by applying `base64 -w 0 FILENAME.ts` command on it and then supply it as DARI_ANDROID_APP_CONFIG_VALUES environmet variable
    - rm configs_strings_template.xml
    - echo ${DARI_ANDROID_APP_CONFIG_VALUES} | base64 -d > configs_strings_template.xml
    - sed -i 's@---BASE_URL_value_from_ci---@'"$DARI_PROD_ENV_URL"'@' configs_strings_template.xml
    # Copy in the config strings
    - rm app/src/release/res/values/strings.xml
    - cp configs_strings_template.xml app/src/release/res/values/strings.xml
    # Copy in the resources strings
    - rm app/src/main/res/values/strings.xml
    - cp dari_values_strings.xml app/src/main/res/values/strings.xml
    # We store this binary file in a variable as hex with this command, `xxd -p gitter-android-app.jks`
    # Then we convert the hex back to a binary file
    - echo -n "${signing_jks_file_hex}" | xxd -r -p - > app/noon-android-app.jks
    - echo ${android_secret_properties} | base64 -d > secrets.properties
    - ./gradlew clean
    - ./gradlew assembleRelease
    - cp -r app/build/outputs/ dariProductionBuildOutputs
  after_script:
    - cd AndroidApp/
    - rm -f app/noon-android-app.jks || true
    - rm -f secrets.properties || true
    - rm -rf app/build/outputs/
    - rm -f app/src/main/res/raw/noonssl.crt
    - rm -f app/google-services.json
  artifacts:
    paths:
      - AndroidApp/dariProductionBuildOutputs/
  only:
    refs:
      - master

assembleProductionPashto:
  image: openjdk:8-jdk
  extends: .buildAndroidJob
  stage: buildPashtoAppsProduction
  environment:
    name: production/pashto
  script:
    - rm -f app/src/main/res/raw/noonssl.crt
    # We encode the noonssl.crt file in base64 by applying `base64 -w 0 FILENAME.ts` command on it and then supply it as ANDROID_SSL_CRT_BASE64 environmet variable
    - echo ${ANDROID_SSL_CRT_BASE64} | base64 -d > app/src/main/res/raw/noonssl.crt
    ## Begin script for dari version
    # We encode the google-services.json file in base64 by applying `base64 -w 0 FILENAME.ts` command on it and then supply it as ANDROID_GOOGLE_SERVICES_JSON environmet variable
    - rm -f app/google-services.json
    - echo ${PASHTO_ANDROID_GOOGLE_SERVICES_JSON} | base64 -d > app/google-services.json
    # We encode the configs_strings_template.xml file in base64 by applying `base64 -w 0 FILENAME.ts` command on it and then supply it as DARI_ANDROID_APP_CONFIG_VALUES environmet variable
    - rm configs_strings_template.xml
    - echo ${PASHTO_ANDROID_APP_CONFIG_VALUES} | base64 -d > configs_strings_template.xml
    - sed -i 's@---BASE_URL_value_from_ci---@'"$PASHTO_PROD_ENV_URL"'@' configs_strings_template.xml
    # We need to make sure the correct applicationId is used in build.gradle when building the pashto version of the application
    - sed -i 's@applicationId "com.app.training24.noon"@applicationId "com.app.training24.noonpashto"@' app/build.gradle
    # Copy in the config strings
    - rm app/src/release/res/values/strings.xml
    - cp configs_strings_template.xml app/src/release/res/values/strings.xml
    # Copy in the resources strings
    - rm app/src/main/res/values/strings.xml
    - cp pashto_values_strings.xml app/src/main/res/values/strings.xml
    # We store this binary file in a variable as hex with this command, `xxd -p gitter-android-app.jks`
    # Then we convert the hex back to a binary file
    - echo -n "${signing_jks_file_hex}" | xxd -r -p - > app/noon-android-app.jks
    - echo ${android_secret_properties} | base64 -d > secrets.properties
    - ./gradlew clean
    - ./gradlew assembleRelease
    - cp -r app/build/outputs/ pashtoProductionBuildOutputs
  after_script:
    - cd AndroidApp/
    - rm -f app/noon-android-app.jks || true
    - rm -f secrets.properties || true
    - rm -rf app/build/outputs/
    - rm -f app/src/main/res/raw/noonssl.crt
    - rm -f app/google-services.json
  artifacts:
    paths:
      - AndroidApp/pashtoProductionBuildOutputs/
  only:
    refs:
      - master

# Build and artifact the admin web app. Cache packages downloaded in node modules to be reused for future runs of the same job on the same branch
buildAdminAppProductionDari:
  image: node:latest
  stage: buildDariAppsProduction
  environment:
    name: production/dari
  cache:
    key: '$CI_JOB_NAME-$CI_COMMIT_REF_NAME'
    paths:
      - Training24Admin/Admin-noon/node_modules/
  before_script:
    - apt-get update && apt-get install -y unzip fontconfig locales gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget
    - cd Training24Admin/Admin-noon/
    - npm cache clean -f
    - npm install -g n
    - n stable
    - node -v
    - npm -v
    - rm -rf package-lock.json node_modules
    - npm cache clean --force
    - npm i --unsafe-perm node-sass
    - npm install --unsafe-perm -g @angular/cli@6.0.0
    - npm install --quiet
    - npm install rxjs@6.2.2 --save
    - npm install --save @types/lodash@4.14.116 --quiet
    - rm -f src/environments/environment.ts
    - rm -f src/environments/environment.prod.ts
  script:
    # Begin script for dari version
    ## We encrypt the environment.ts file in base64 by applying `base64 -w 0 FILENAME.ts` command on it and then supply it as environmet variable
    - echo ${DARI_ADMIN_APP_CONFIG_VALUES} | base64 -d > src/environments/environment.ts
    - echo ${DARI_ADMIN_APP_CONFIG_VALUES} | base64 -d > src/environments/environment.prod.ts
    - npm run build --prod
    - cp -r dist/ distProductionDari
  after_script:
    - cd Training24Admin/Admin-noon/
    - rm -rf dist/
    - rm -rf src/environments/environment.ts
    - rm -rf src/environments/environment.prod.ts
  artifacts:
    paths:
      - Training24Admin/Admin-noon/distProductionDari/
    expire_in: 1 week
  only:
    refs:
      - master

buildAdminAppProductionPashto:
  image: node:latest
  stage: buildPashtoAppsProduction
  environment:
    name: production/pashto
  cache:
    key: '$CI_JOB_NAME-$CI_COMMIT_REF_NAME'
    paths:
      - Training24Admin/Admin-noon/node_modules/
  before_script:
    - apt-get update && apt-get install -y unzip fontconfig locales gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget
    - cd Training24Admin/Admin-noon/
    - npm cache clean -f
    - npm install -g n
    - n stable
    - node -v
    - npm -v
    - rm -rf package-lock.json node_modules
    - npm cache clean --force
    - npm i --unsafe-perm node-sass
    - npm install --unsafe-perm -g @angular/cli@6.0.0
    - npm install --quiet
    - npm install rxjs@6.2.2 --save
    - npm install --save @types/lodash@4.14.116 --quiet
    - rm -f src/environments/environment.ts
    - rm -f src/environments/environment.prod.ts
  script:
    # Begin script for dari version
    ## We encrypt the environment.ts file in base64 by applying `base64 -w 0 FILENAME.ts` command on it and then supply it as environmet variable
    - echo ${PASHTO_ADMIN_APP_CONFIG_VALUES} | base64 -d > src/environments/environment.ts
    - echo ${PASHTO_ADMIN_APP_CONFIG_VALUES} | base64 -d > src/environments/environment.prod.ts
    - npm run build --prod
    - cp -r dist/ distProductionPashto
  after_script:
    - cd Training24Admin/Admin-noon/
    - rm -rf dist/
    - rm -rf src/environments/environment.ts
    - rm -rf src/environments/environment.prod.ts
  artifacts:
    paths:
      - Training24Admin/Admin-noon/distProductionPashto/
    expire_in: 1 week
  only:
    refs:
      - master

# Build and artifact the sales web app. Cache packages downloaded in node modules to be reused for future runs of the same job on the same branch
buildSalesAppProductionDari:
  image: node:latest
  stage: buildDariAppsProduction
  environment:
    name: production/dari
  cache:
    key: '$CI_JOB_NAME-$CI_COMMIT_REF_NAME'
    paths:
      - Training24Admin/Sales-noon/node_modules/
  before_script:
    - apt-get update && apt-get install -y unzip fontconfig locales gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget
    - cd Training24Admin/Sales-noon/
    - npm install --quiet
    - rm -f src/environments/environment.ts
    - rm -f src/environments/environment.prod.ts
  script:
    # Begin script for dari version
    ## We encrypt the environment.ts file in base64 by applying `base64 -w 0 FILENAME.ts` command on it and then supply it as environmet variable
    - echo ${DARI_SALES_APP_CONFIG_VALUES} | base64 -d > src/environments/environment.ts
    - echo ${DARI_SALES_APP_CONFIG_VALUES} | base64 -d > src/environments/environment.prod.ts
    - npm run build --prod
    - cp -r dist/ distProductionDari
  after_script:
    - cd Training24Admin/Sales-noon/
    - rm -rf dist/
    - rm -rf src/environments/environment.ts
    - rm -rf src/environments/environment.prod.ts
  artifacts:
    paths:
      - Training24Admin/Sales-noon/distProductionDari/
    expire_in: 1 week
  only:
    refs:
      - master

buildSalesAppProductionPashto:
  image: node:latest
  stage: buildPashtoAppsProduction
  environment:
    name: production/pashto
  cache:
    key: '$CI_JOB_NAME-$CI_COMMIT_REF_NAME'
    paths:
      - Training24Admin/Sales-noon/node_modules/
  before_script:
    - apt-get update && apt-get install -y unzip fontconfig locales gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget
    - cd Training24Admin/Sales-noon/
    - npm install --quiet
    - rm -f src/environments/environment.ts
    - rm -f src/environments/environment.prod.ts
  script:
    # Begin script for dari version
    ## We encrypt the environment.ts file in base64 by applying `base64 -w 0 FILENAME.ts` command on it and then supply it as environmet variable
    - echo ${PASHTO_SALES_APP_CONFIG_VALUES} | base64 -d > src/environments/environment.ts
    - echo ${PASHTO_SALES_APP_CONFIG_VALUES} | base64 -d > src/environments/environment.prod.ts
    - npm run build --prod
    - cp -r dist/ distProductionPashto
  after_script:
    - cd Training24Admin/Sales-noon/
    - rm -rf dist/
    - rm -rf src/environments/environment.ts
    - rm -rf src/environments/environment.prod.ts
  artifacts:
    paths:
      - Training24Admin/Sales-noon/distProductionPashto/
    expire_in: 1 week
  only:
    refs:
      - master

# Build and artifact the feedback web app. Cache packages downloaded in node modules to be reused for future runs of the same job on the same branch
buildFeedbackAppProductionDari:
  image: node:latest
  stage: buildDariAppsProduction
  environment:
    name: production/dari
  cache:
    key: '$CI_JOB_NAME-$CI_COMMIT_REF_NAME'
    paths:
      - Training24Admin/Feedback-noon/node_modules/
  before_script:
    - apt-get update && apt-get install -y unzip fontconfig locales gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget
    - cd Training24Admin/Feedback-noon/
    - npm install --quiet
    - rm -f src/environments/environment.ts
    - rm -f src/environments/environment.prod.ts
  script:
    # Begin script for dari version
    ## We encrypt the environment.ts file in base64 by applying `base64 -w 0 FILENAME.ts` command on it and then supply it as environmet variable
    - echo ${DARI_FEEDBACK_APP_CONFIG_VALUES} | base64 -d > src/environments/environment.ts
    - echo ${DARI_FEEDBACK_APP_CONFIG_VALUES} | base64 -d > src/environments/environment.prod.ts
    - npm run build --prod
    - cp -r dist/ distProductionDari
  after_script:
    - cd Training24Admin/Feedback-noon/
    - rm -rf dist/
    - rm -rf src/environments/environment.ts
    - rm -rf src/environments/environment.prod.ts
  artifacts:
    paths:
      - Training24Admin/Feedback-noon/distProductionDari/
    expire_in: 1 week
  only:
    refs:
      - master

buildFeedbackAppProductionPashto:
  image: node:latest
  stage: buildPashtoAppsProduction
  environment:
    name: production/pashto
  cache:
    key: '$CI_JOB_NAME-$CI_COMMIT_REF_NAME'
    paths:
      - Training24Admin/Feedback-noon/node_modules/
  before_script:
    - apt-get update && apt-get install -y unzip fontconfig locales gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget
    - cd Training24Admin/Feedback-noon/
    - npm install --quiet
    - rm -f src/environments/environment.ts
    - rm -f src/environments/environment.prod.ts
  script:
    # Begin script for dari version
    ## We encrypt the environment.ts file in base64 by applying `base64 -w 0 FILENAME.ts` command on it and then supply it as environmet variable
    - echo ${PASHTO_FEEDBACK_APP_CONFIG_VALUES} | base64 -d > src/environments/environment.ts
    - echo ${PASHTO_FEEDBACK_APP_CONFIG_VALUES} | base64 -d > src/environments/environment.prod.ts
    - npm run build --prod
    - cp -r dist/ distProductionPashto
  after_script:
    - cd Training24Admin/Feedback-noon/
    - rm -rf dist/
    - rm -rf src/environments/environment.ts
    - rm -rf src/environments/environment.prod.ts
  artifacts:
    paths:
      - Training24Admin/Feedback-noon/distProductionPashto/
    expire_in: 1 week
  only:
    refs:
      - master

# Build ASPNETCORE API, package web app artifacts from previous jobs in webhost directory, generate artifact holding all files of API and web apps. Cache downloaded nuget packages to be reused for future runs of the same job on the same branch
buildBackendProductionDari:
  image: mcr.microsoft.com/dotnet/core/sdk:2.1
  stage: buildPackageBackendHostProduction
  environment:
    name: review/dari
  dependencies:
    - assembleProductionDari
    - buildAdminAppProductionDari
    - buildSalesAppProductionDari
    - buildFeedbackAppProductionDari
  variables:
    OBJECTS_DIRECTORY: obj/
    BINARIES_DIRECTORY: bin/
    DARI_RELEASE_OBJECTS_DIRECTORY: releaseProductionDari/
    NUGET_PACKAGES_DIRECTORY: .nuget/
    SOURCE_CODE_PATH: Training24Admin/
  cache:
    key: '$CI_JOB_NAME-$CI_COMMIT_REF_NAME'
    paths:
      - ${SOURCE_CODE_PATH}${OBJECTS_DIRECTORY}project.assets.json
      - ${SOURCE_CODE_PATH}${OBJECTS_DIRECTORY}*.csproj.nuget.*
      - ${NUGET_PACKAGES_DIRECTORY}
  before_script:
    - dotnet restore --packages ${NUGET_PACKAGES_DIRECTORY}
  script:
    - dotnet publish -c Release -o ${DARI_RELEASE_OBJECTS_DIRECTORY} --no-restore
    # TODO: RnD on cleanup of placeholder web app files placed into the release folders by dotnet publish as it's default behavior. It may pose a security risk to keep those files in if they are not needed by the application.
    # Package in dari web apps
    - rm -rf ${SOURCE_CODE_PATH}${DARI_RELEASE_OBJECTS_DIRECTORY}Admin-noon/dist/
    - rm -rf ${SOURCE_CODE_PATH}${DARI_RELEASE_OBJECTS_DIRECTORY}Sales-noon/dist/
    - rm -rf ${SOURCE_CODE_PATH}${DARI_RELEASE_OBJECTS_DIRECTORY}Feedback-noon/dist/
    - cp -a ${SOURCE_CODE_PATH}Admin-noon/distProductionDari/. ${SOURCE_CODE_PATH}${DARI_RELEASE_OBJECTS_DIRECTORY}Admin-noon/dist/
    - cp -a ${SOURCE_CODE_PATH}Sales-noon/distProductionDari/. ${SOURCE_CODE_PATH}${DARI_RELEASE_OBJECTS_DIRECTORY}Sales-noon/dist/
    - cp -a ${SOURCE_CODE_PATH}Feedback-noon/distProductionDari/. ${SOURCE_CODE_PATH}${DARI_RELEASE_OBJECTS_DIRECTORY}Feedback-noon/dist/
  artifacts:
    paths:
      - ${SOURCE_CODE_PATH}${DARI_RELEASE_OBJECTS_DIRECTORY}
    expire_in: 1 month
  only:
    refs:
      - master

buildBackendProductionPashto:
  image: mcr.microsoft.com/dotnet/core/sdk:2.1
  stage: buildPackageBackendHostProduction
  environment:
    name: review/pashto
  dependencies:
    - assembleProductionPashto
    - buildAdminAppProductionPashto
    - buildSalesAppProductionPashto
    - buildFeedbackAppProductionPashto
  variables:
    OBJECTS_DIRECTORY: obj/
    BINARIES_DIRECTORY: bin/
    PASHTO_RELEASE_OBJECTS_DIRECTORY: releaseProductionPashto/
    NUGET_PACKAGES_DIRECTORY: .nuget/
    SOURCE_CODE_PATH: Training24Admin/
  cache:
    key: '$CI_JOB_NAME-$CI_COMMIT_REF_NAME'
    paths:
      - ${SOURCE_CODE_PATH}${OBJECTS_DIRECTORY}project.assets.json
      - ${SOURCE_CODE_PATH}${OBJECTS_DIRECTORY}*.csproj.nuget.*
      - ${NUGET_PACKAGES_DIRECTORY}
  before_script:
    - dotnet restore --packages ${NUGET_PACKAGES_DIRECTORY}
  script:
    - dotnet publish -c Release -o ${PASHTO_RELEASE_OBJECTS_DIRECTORY} --no-restore
    # TODO: RnD on cleanup of placeholder web app files placed into the release folders by dotnet publish as it's default behavior. It may pose a security risk to keep those files in if they are not needed by the application.
    # Package in pashto web apps
    - rm -rf ${SOURCE_CODE_PATH}${PASHTO_RELEASE_OBJECTS_DIRECTORY}Admin-noon/dist/
    - rm -rf ${SOURCE_CODE_PATH}${PASHTO_RELEASE_OBJECTS_DIRECTORY}Sales-noon/dist/
    - rm -rf ${SOURCE_CODE_PATH}${PASHTO_RELEASE_OBJECTS_DIRECTORY}Feedback-noon/dist/
    - cp -a ${SOURCE_CODE_PATH}Admin-noon/distProductionPashto/. ${SOURCE_CODE_PATH}${PASHTO_RELEASE_OBJECTS_DIRECTORY}Admin-noon/dist/
    - cp -a ${SOURCE_CODE_PATH}Sales-noon/distProductionPashto/. ${SOURCE_CODE_PATH}${PASHTO_RELEASE_OBJECTS_DIRECTORY}Sales-noon/dist/
    - cp -a ${SOURCE_CODE_PATH}Feedback-noon/distProductionPashto/. ${SOURCE_CODE_PATH}${PASHTO_RELEASE_OBJECTS_DIRECTORY}Feedback-noon/dist/
  artifacts:
    paths:
      - ${SOURCE_CODE_PATH}${PASHTO_RELEASE_OBJECTS_DIRECTORY}
    expire_in: 1 month
  only:
    refs:
      - master

publishWebHostableContainerProductionDari:
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: ['']
  dependencies:
    - buildBackendProductionDari
  environment:
    name: production/dari
  stage: containerizeWebProduction
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/dariProd.Dockerfile --destination $NOON_WEB_IMAGE_DARI_PROD
  only:
    refs:
      - master

publishWebHostableContainerProductionPashto:
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: ['']
  dependencies:
    - buildBackendProductionPashto
  environment:
    name: production/pashto
  stage: containerizeWebProduction
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/pashtoProd.Dockerfile --destination $NOON_WEB_IMAGE_PASHTO_PROD
  only:
    refs:
      - master

deployDariProduction:
  image: devth/helm
  stage: deployWebProduction
  environment:
    name: production/dari
    url: https://${DARI_PROD_ENV_URL}
  before_script:
    - mkdir -p /etc/deploy
    - echo ${GKE_SERVICE_ACCOUNT} | base64 -d > /etc/deploy/sa.json
    - gcloud auth activate-service-account --key-file=/etc/deploy/sa.json --project=${GKE_PROJECT}
    - gcloud container clusters get-credentials ${GKE_CLUSTER_NAME} --zone=${GKE_ZONE} --project=${GKE_PROJECT}
    - echo "${DARI_WEB_DEPLOYMENT_CONFIG_VALUES}" > chart/values.yaml
  script:
    - helm upgrade --install --namespace ${KUBE_NAMESPACE} --set image=${NOON_WEB_IMAGE_DARI_PROD} --set webHostingUrl=${DARI_PROD_ENV_URL} --set deploymentNamespace=${KUBE_NAMESPACE} --set netCoreEnvironment=Production --set gitlabCiProjectPath=${CI_PROJECT_PATH_SLUG} --set gitlabCiProjectEnvironment=${CI_ENVIRONMENT_SLUG} --set name=noonweb-dari-production --set applicationListenUri=http://*:80 --wait noonweb-dari ./chart
  only:
    refs:
      - master

deployPashtoProduction:
  image: devth/helm
  stage: deployWebProduction
  environment:
    name: production/pashto
    url: https://${PASHTO_PROD_ENV_URL}
  before_script:
    - mkdir -p /etc/deploy
    - echo ${GKE_SERVICE_ACCOUNT} | base64 -d > /etc/deploy/sa.json
    - gcloud auth activate-service-account --key-file=/etc/deploy/sa.json --project=${GKE_PROJECT}
    - gcloud container clusters get-credentials ${GKE_CLUSTER_NAME} --zone=${GKE_ZONE} --project=${GKE_PROJECT}
    - echo "${PASHTO_WEB_DEPLOYMENT_CONFIG_VALUES}" > chart/values.yaml
  script: 
    - helm upgrade --install --namespace ${KUBE_NAMESPACE} --set image=${NOON_WEB_IMAGE_PASHTO_PROD} --set webHostingUrl=${PASHTO_PROD_ENV_URL} --set deploymentNamespace=${KUBE_NAMESPACE} --set netCoreEnvironment=Production --set gitlabCiProjectPath=${CI_PROJECT_PATH_SLUG} --set gitlabCiProjectEnvironment=${CI_ENVIRONMENT_SLUG} --set name=noonweb-pashto-production --set applicationListenUri=http://*:80 --wait noonweb-pashto ./chart
  only:
    refs:
      - master
